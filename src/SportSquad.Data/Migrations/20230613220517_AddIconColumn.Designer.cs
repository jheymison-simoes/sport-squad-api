// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportSquad.Data;

#nullable disable

namespace SportSquad.Data.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20230613220517_AddIconColumn")]
    partial class AddIconColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("PlayerSequence");

            modelBuilder.HasSequence("PlayerTypeSequence");

            modelBuilder.HasSequence("SquadConfigSequence");

            modelBuilder.HasSequence("SquadSequence");

            modelBuilder.HasSequence("UserSequence");

            modelBuilder.Entity("SportSquad.Domain.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("nextval('\"PlayerSequence\"')");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("PlayerTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_type_id");

                    b.Property<Guid>("SquadId")
                        .HasColumnType("uuid")
                        .HasColumnName("squad_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_player");

                    b.HasIndex("PlayerTypeId")
                        .HasDatabaseName("ix_player_player_type_id");

                    b.HasIndex("SquadId")
                        .HasDatabaseName("ix_player_squad_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_player_user_id");

                    b.ToTable("player", (string)null);
                });

            modelBuilder.Entity("SportSquad.Domain.Models.PlayerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("nextval('\"PlayerTypeSequence\"')");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValue("fa-check")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_player_type");

                    b.ToTable("player_type", (string)null);
                });

            modelBuilder.Entity("SportSquad.Domain.Models.Squad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("nextval('\"SquadSequence\"')");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_squad");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_squad_user_id");

                    b.ToTable("squad", (string)null);
                });

            modelBuilder.Entity("SportSquad.Domain.Models.SquadConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AllowSubstitutes")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_substitutes");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("nextval('\"SquadConfigSequence\"')");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("PlayerTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_type_id");

                    b.Property<int>("QuantityPlayers")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_players");

                    b.Property<Guid>("SquadId")
                        .HasColumnType("uuid")
                        .HasColumnName("squad_id");

                    b.HasKey("Id")
                        .HasName("pk_squad_config");

                    b.HasIndex("PlayerTypeId")
                        .HasDatabaseName("ix_squad_config_player_type_id");

                    b.HasIndex("SquadId")
                        .HasDatabaseName("ix_squad_config_squad_id");

                    b.ToTable("squad_config", (string)null);
                });

            modelBuilder.Entity("SportSquad.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("nextval('\"UserSequence\"')");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Ddd")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("ddd");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SportSquad.Domain.Models.Player", b =>
                {
                    b.HasOne("SportSquad.Domain.Models.PlayerType", "PlayerType")
                        .WithMany("Players")
                        .HasForeignKey("PlayerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_player_type_id");

                    b.HasOne("SportSquad.Domain.Models.Squad", "Squad")
                        .WithMany("Players")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_squad_id");

                    b.HasOne("SportSquad.Domain.Models.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_player_user_id");

                    b.Navigation("PlayerType");

                    b.Navigation("Squad");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportSquad.Domain.Models.Squad", b =>
                {
                    b.HasOne("SportSquad.Domain.Models.User", "User")
                        .WithMany("Squads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_squad_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportSquad.Domain.Models.SquadConfig", b =>
                {
                    b.HasOne("SportSquad.Domain.Models.PlayerType", "PlayerType")
                        .WithMany("SquadConfigs")
                        .HasForeignKey("PlayerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_squad_config_player_type_id");

                    b.HasOne("SportSquad.Domain.Models.Squad", "Squad")
                        .WithMany("SquadConfigs")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_squad_config_user_id");

                    b.Navigation("PlayerType");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("SportSquad.Domain.Models.PlayerType", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("SquadConfigs");
                });

            modelBuilder.Entity("SportSquad.Domain.Models.Squad", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("SquadConfigs");
                });

            modelBuilder.Entity("SportSquad.Domain.Models.User", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Squads");
                });
#pragma warning restore 612, 618
        }
    }
}
